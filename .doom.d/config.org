#+TITLE: Bledley's Doom Emacs Literate Config
#+ID: 2023-07-21-1853
#+PROPERTY: header-args:emacs-lisp
#+OPTIONS: toc:4 num:nil
#+STARTUP: showall

* Table of Contents :toc:
- [[#general-settings][General Settings]]
  - [[#lexical-binding][Lexical binding]]
  - [[#ask-for-a-buffer-on-window-split][Ask for a buffer on window split]]
  - [[#window-pop-up-rules][Window pop up rules]]
  - [[#delete-files-to-trash-auto-revert-changed-buffers-change-undo-limit-and-add-scroll-margin][Delete Files to trash, Auto revert changed buffers, change undo limit and add scroll margin.]]
  - [[#disable-quit-confimation-line-numbers][Disable quit confimation, Line Numbers]]
  - [[#initial-buffer-settings][Initial buffer settings]]
  - [[#fonts][Fonts]]
  - [[#visualtheme][Visual/Theme]]
  - [[#modeline][Modeline]]
- [[#org][Org]]
  - [[#org--agenda-directories][Org & Agenda Directories]]
  - [[#org-agenda][Org Agenda]]
  - [[#orgagenda-settings][Org/Agenda Settings]]
  - [[#org-journal-settings][Org Journal Settings]]
  - [[#org-capture-templates][Org Capture Templates]]
  - [[#org-task-keywordsfaces][Org Task keywords/faces]]
  - [[#org-roam][Org Roam]]
- [[#beaconfocus][Beacon/Focus]]
  - [[#beacon][Beacon]]
  - [[#focus][Focus]]
- [[#browser][Browser]]
- [[#keybinds][Keybinds]]
  - [[#regularly-used-fileskeybinds][Regularly used files/keybinds]]
  - [[#make-new-buffers-orgmd-easier][Make new buffers org/md easier]]
  - [[#leader-keybinds][Leader Keybinds]]
- [[#dired][Dired]]
  - [[#dired-keybinds][Dired Keybinds]]
  - [[#simple-dired][Simple Dired]]
- [[#elfeed][Elfeed]]
- [[#projectile][Projectile]]
- [[#snippet-functions][Snippet Functions]]
  - [[#markdown-front-matter][Markdown front matter]]
  - [[#org-front-matter][Org front matter]]
  - [[#blog-front-matter][Blog front matter]]
  - [[#timestamp][Timestamp]]
  - [[#quick-todo][Quick todo]]
- [[#md-roam][Md-roam]]
- [[#denote][Denote]]
- [[#rainbow-mode][Rainbow mode]]
- [[#org-clock-sfx][Org clock sfx]]
- [[#org-msg][Org-msg]]
- [[#org-roam-ui][Org-roam UI]]
- [[#novel][nov.el]]
- [[#timestamp-last-modified][Timestamp (Last modified)]]
- [[#emms][EMMS]]
- [[#markdownwriteroom-hook][Markdown/Writeroom hook]]
- [[#smart-parens][Smart Parens]]
- [[#load-other-config-files][Load other config files]]

* General Settings
** Lexical binding
Lexical binding needs to be enabled in comments at the top of the config for certain keybinds to work.

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

** Ask for a buffer on window split
When I make a new split ask which buffer I'd like displayed there.

#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

** Window pop up rules
I like certain things to pop up on the right hand side 50% of the screen. Some things work better on the bottom.

#+begin_src emacs-lisp
(set-popup-rule! "^\\*eww*" :side 'right :size 0.50 :select t :ttl nil)
(set-popup-rule! "^\\*notmuch*" :side 'right :size 0.50 :select t :ttl nil)
(set-popup-rule! "^\\*Occur*" :side 'bottom :size 0.50 :select t :ttl nil)
#+end_src

** Delete Files to trash, Auto revert changed buffers, change undo limit and add scroll margin.
When I delete a file it should go to trash rather than permanent delete.
Buffers will auto revert when they detect saved changes on disk.
The undo limit is set to 80mb and fine-undo is a more granular way of undoing.
Scroll margin at the top and bottom of the page is 2.

#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")
(global-auto-revert-mode 1)
(setq undo-limit 80000000
      evil-want-fine-undo t
      scroll-margin 2)
#+end_src

** Disable quit confimation, Line Numbers
Ask to confirm quit is a bit annoying so I disable that. I don't need line numbers for most of what I do in org/markdown files so disabled but I can easily toggle on with (SPC-t-l) if needed. I use relative line numbers when it's active. Auto save is on. Deactivating highlight line mode can be confusing because there are two different modes for global and local.

#+begin_src emacs-lisp
(setq confirm-kill-emacs nil)
(setq display-line-numbers-type nil)
(setq global-hl-line-modes nil)
(setq hl-line-mode nil)
;(setq display-line-numbers-type 'relative)
(setq auto-save-default t)
#+end_src

** Initial buffer settings
I used to launch to a nice dashboard but now I realise it is only eye candy and not all that useful. Launch me into an empty scratch pad so I can just start writing something.
"C-c s" is a convienient shortcut to '*scratch*'. I change the default major mode for the pretty often so default to lisp for testing out lines of code.

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer-create "*scratch*")))
(setq initial-scratch-message nil)
(setq initial-major-mode 'lisp-mode)
(global-set-key (kbd "C-c s") (lambda () (interactive) (switch-to-buffer "*scratch*")))
;(after! persp-mode
; (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

** Fonts
I usually use Jet Brains Mono or Iosevka..also like the variable font sizes to be pretty consistent, more like the terminal version.

 #+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 13)
     doom-big-font (font-spec :family "JetBrains Mono" :size 14)
     doom-serif-font (font-spec :family "JetBrains Mono" :size 13)
     doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 13))
 #+end_src

** Visual/Theme
I like the base theme of wilmersdorf but I have some custom-set-faces to tweak to my liking here and in custom.el. I found that solaire-mode needs to be disabled to make all the background colours consistent. It is also disables in packages.el but I'm not sure which is making it work how I like. I don't like zen, writeroom to go too crazy with the zoom/big font. Highlight indent puts little lines down your white space indentations. I'm unsure about it but trialing it out.

Cursor colours reflect my theme.

hl-todo faces custom colours and terms. I'm not sure if this is loading correctly? I use the org based status most of the time anyway..

#+begin_src emacs-lisp
 (setq doom-theme 'doom-wilmersdorf)
;;
(after! solaire-mode
  (solaire-global-mode -1))
;;Writeroom
(add-hook 'writeroom-mode-hook (lambda () (display-line-numbers-mode -1)))
(setq writeroom-mode-line t)
(setq writeroom-width 120)
;;
(setq +zen-text-scale 0.0)
;; Highlight indent guide
;;(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
;; Cursor
;(after! doom-theme
(setq evil-normal-state-cursor '(box "#819cd6")
      evil-insert-state-cursor '(bar "#47FFE0")
      evil-visual-state-cursor '(hollow "#c280A0"))
;;hl-todo mode
(setq hl-todo-mode t)
(setq global-hl-todo-mode t)
(after! hl-todo
(setq hl-todo-keyword-faces
      '(("TODO"   . "#c280A0")
        ("NOTE"  . "#c280A0")
        ("IDEA"  . "#c280A0")
        ("QUESTION"  . "#c280A0")
        ("REVIEW"  . "#c280A0")
        ("RESEARCH"   . "#c280A0"))))
#+end_src

** Modeline
I like a pretty minimal modeline, this disables most things I don't need.

#+begin_src emacs-lisp
(after! doom-modeline
  (remove-hook 'doom-modeline-mode-hook #'size-indication-mode) ; filesize in modeline
  (remove-hook 'doom-modeline-mode-hook #'column-number-mode)   ; cursor column in modeline
  (line-number-mode -1)
  (setq doom-modeline-enable-word-count nil)
  (setq doom-modeline-buffer-file-name-style 'file-name)
  (setq doom-modeline-percent-position nil)
  (setq display-time-format "%a %Y-%m-%d %H:%M")
  (display-time-mode -1)
  (setq doom-modeline-height 15)
  (setq display-time-load-average nil)
  (setq display-time-default-load-average nil)
  (setq doom-modeline-icon t)
  (setq doom-modeline-major-mode-icon nil)
  (setq doom-modeline-major-color-icon t)
  (setq doom-modeline-modal-icon t)
  (setq doom-modeline-buffer-encoding nil))
#+end_src

* Org
** Org & Agenda Directories
Setting the directory for org and org agenda. I'm not sure it needs to be in an after! block but it's working fine..

#+begin_src emacs-lisp
(after! org
(set-popup-rule! "^\\*Org Agenda" :side 'right :size 0.50 :select t :ttl nil)
(setq org-directory "~/Dropbox/org/")
;(setq org-agenda-files (directory-files-recursively "~/Dropbox/roam/" "\\.org$"))
(setq org-agenda-files
'("~/Dropbox/org/todo.org"
  "~/Dropbox/org/events.org"
  "~/Dropbox/org/goals.org")))
#+end_src

** Org Agenda
Custom Agenda views and keybind/function. Simple view I use most of the time shows priority 1, 2, 3 custom tags.

#+begin_src emacs-lisp
;;My agenda custom commands
(defun my/org-agenda-overview ()
  (interactive)
  (org-agenda nil "o"))
;;
;; My agenda custom commands
(defun my/org-agenda-day-view ()
  (interactive)
  (org-agenda nil "d"))
;; ;;
;; ;; map leader a (previously act on?) to my agenda view
;; (map! :leader
;;       :desc "My agenda custom" "d" #'my-agenda-custom-2)
;; Org Agenda Custom Commands
(setq org-agenda-custom-commands
   '(("o" "Overview"
      ((agenda ""
        ((org-agenda-span 'day)
         (org-agenda-overriding-header "Day Overview:")))
       (tags "p1"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "#p1:")))
       (tags "p2"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "#p2:")))
       (tags "p3"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "#p3:")))
 ;      (todo "ACTIVE"
 ;            ((org-agenda-overriding-header "Active:")))
 ;     (todo "WAITING"
 ;           ((org-agenda-overriding-header "Waiting:")))
        (tags "p4"
             ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
              (org-agenda-overriding-header "#p4"))))
      )
   ("d" "Day View"
         ((agenda ""
                  ((org-agenda-span '1)))
))))
#+end_src

** Org/Agenda Settings
Other agenda settings. Can't get time grid to work, would really like that...

#+begin_src emacs-lisp
(after! org
  (setq org-agenda-block-separator ?┈
        org-agenda-use-time-grid nil
                                        ;'((daily today require-timed)
                                        ;(800 1000 1200 1400 1600 1800 2000)
                                        ;" ┈┈┈┈ " "┈┈┈┈┈┈┈┈┈┈┈┈┈")
        org-agenda-current-time-string
        "! now ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈")
  ;;
  (setq org-attach-id-dir "~/Dropbox/org/assets/")
  (setq org-highlight-sparse-tree-matches nil)
  (setq org-startup-folded t)
  (setq org-log-done 'time)
  (setq org-clock-into-drawer t)
  (setq org-deadline-warning-days 0)
  (setq org-agenda-span 5
        org-agenda-start-day "today")
  (setq org-refile-targets (quote (("~/Dropbox/org/todo.org" :maxlevel . 4)
                                   ("~/Dropbox/org/archive.org" :maxlevel . 4)
                                   ("~/Dropbox/org/goals.org" :maxlevel . 4)
                                   ("~/Dropbox/org/reading.org" :maxlevel . 4)
                                   ("~/Dropbox/org/events.org" :maxlevel . 4)
                                   ("~/Dropbox/org/someday.org" :level . 4)))))
(after! org
  (setq org-tag-alist-for-agenda
        '(
             ("@NA")
             ("@on")
             ("@off")
             ("@email")
             ("@sba")
             ("@art")
             ("@email")
             ("@errands")
             ("@health")
             ("@reading")
             ("@research")
             ("@sys")
             ("@watch")
             ("@writing")
             ("p1")
             ("p2")
             ("p3")
             ("p4")
               ))
  (setq org-tag-alist
        '(
             ("Budding")
             ("Evergreen")
             ("Literature")
             ("Fleeting")
             ("Seedling")
             ("NA")
             ("sba")
             ("art")
             ("blog")
             ("draft")
             ("emacs")
             ("email")
             ("expenses")
             ("film")
             ("football")
             ("health")
             ("reading")
             ("refile")
             ("research")
             ("sys")
             ("log")
             ("question")
             ("watch")
             ("writing")
             ("p1")
             ("p2")
             ("p3")
             ("p4")
               ))
        (setq! org-agenda-use-tag-inheritance t
               org-ellipsis " ▾ "
               org-hide-leading-stars t
               org-priority-highest '?A
               org-priority-lowest '?D
               org-default-priority '?C
               org-priority-faces '((?A :foreground "#989DAF")
                                    (?B :foreground "#8C92A6")
                                    (?C :foreground "#80869c")
                                    (?D :foreground "#757C94"))))
  ;;
  (add-hook! 'org-mode-hook 'org-fancy-priorities-mode)
  (add-hook! 'org-agenda-mode-hook 'org-fancy-priorities-mode)
  ;;
  (after! org-fancy-priorities
    (setq!
     org-fancy-priorities-list
     '("[A]" "[B]" "[C]" "[D]")
     ))
  ;; Place tags close to the right-hand side of the window - is this working?
  (add-hook 'org-finalize-agenda-hook 'place-agenda-tags)
  (defun place-agenda-tags ()
    "Put the agenda tags by the right border of the agenda window."
    (setq org-agenda-tags-column (- 4 (window-width)))
    (org-agenda-align-tags))
  ;;
;   (require 'org-habit)
;   (setq org-habit-following-days 7)
;   (setq org-habit-preceding-days 30)
;   (setq org-habit-show-habits t)
#+end_src

** Org Journal Settings
Journal settings a little bit mingled up with agenda stuff, I may rearrange this..

#+begin_src emacs-lisp
(after! org
(setq!
      org-journal-time-prefix ""
      org-journal-date-prefix ""
      org-journal-time-format "%H:%M"
      org-journal-date-format "%Y%m%d"
      org-journal-file-format "%Y%m%d.org"
      org-journal-dir "~/Dropbox/org/journals/"
      org-superstar-headline-bullets-list '("◉" "○" "○" "○" "○" "○" "○")
      org-hide-emphasis-markers t
      org-agenda-start-with-log-mode t
      org-log-into-drawer t
      org-log-done t
      org-agenda-max-todos 10))
;;
(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  (unless (eq org-journal-file-type 'daily)
    (org-narrow-to-subtree))
    (goto-char (point-max)))
;;
#+end_src

** Org Capture Templates
Quick capture templates are triggered with (SPC-n-n) and then the below prefix

#+begin_src emacs-lisp
(after! org
  (setq! org-capture-templates
         '(("i" "Todo" entry (file+olp "~/Dropbox/org/todo.org" "INBOX")
            "** TODO %?")
            ;; ("j" "Journal entry" plain (function org-journal-find-location)
            ;;  "%(format-time-string org-journal-time-format) %?" :empty-lines 1 :jump-to-captured t)
            ;; ("n" "Note (with Denote)" plain
            ;;      (file denote-last-path)
            ;;      #'denote-org-capture
            ;;      :no-save t
            ;;      :immediate-finish nil
            ;;      :kill-buffer t
            ;;      :jump-to-captured t)
           ;; ("j" "Log" entry (file+datetree "~/Dropbox/vault/log.org")
           ;;  "* %(format-time-string org-journal-time-format) %?")
           ;; ("j" "Log" plain (file "~/Dropbox/vault/0-Fleeting-Notes/log.md")
           ;;  "%?")
           ("x" "Socials" entry (file+olp "~/Dropbox/socials.org" "Drafts")
            "** %?")
           ("y" "Someday" entry (file+olp "~/Dropbox/org/todo.org" "SOMEDAY/MAYBE")
            "** SOMEDAY %?")
           ;; ("t" "Text at point" entry (file+datetree "~/Dropbox/vault/Journals/log.org")
           ;;  "* %(format-time-string org-journal-time-format) %? %a")
           ("m" "Mail ")
           ("mf" "Follow Up" entry (file+olp "~/Dropbox/org/todo.org" "INBOX")
          "** TODO Follow up with %:fromname on %a\nSCHEDULED:%t\n\n%i")
           ("mr" "Read Later" entry (file+olp "~/Dropbox/org/todo.org" "INBOX")
          "** TODO %:subject\nSCHEDULED:%t\n%a\n\n%i")
           ("e" "Event" entry (file+olp "~/Dropbox/org/events.org" "2023")
            "*** EVENT %?%^{SCHEDULED}p" :empty-lines 1)
           ("r" "Reading List" plain (file+olp "~/Dropbox/org/reading.org" "INBOX")
            "** TODO %?\nCREATED:%U" :empty-lines 1)
           ("w" "Weekly Review" plain (file buffer-name)
            (file "~/Dropbox/4-Resources/Templates/tpl-weekly-review.txt") :empty-lines 1))))
#+end_src

** Org Task keywords/faces
Todo, task status names, colours and style.

#+begin_src emacs-lisp
(after! org
(setq! org-todo-keywords
      '((sequence
         "TODO(t)"
         "ACTIVE(a)"
         "NEXT(n)"
         "GOAL(g)"
         "PROJECT(p)"
         "EVENT(e)"
         "SOMEDAY(s)"
         "WAITING(w)"
         "|"
         "DONE(d)"
         "CANCELLED(c)" ))))
(setq! org-todo-keyword-faces
      '(("TODO" :foreground "#C280a0" :weight bold)
       ("ACTIVE" :foreground "#66FFD6" :weight bold)
       ("NEXT" :foreground "#FFFBB8" :weight bold)
       ("SOMEDAY" :foreground "#AAAAE1" :weight bold)
       ("WAITING" :foreground "#AAAAE1" :weight bold)
       ("GOAL" :foreground "#65DDA3" :weight bold)
       ("PROJECT" :foreground "#8C8DFF" :weight bold)
       ("EVENT" :foreground "#5099DA" :weight bold)
       ("DONE" :foreground "#2FF9D1" :weight bold)
       ("CANCELLED" :foreground "#80869c" :weight bold)))
(after! org
(setq! org-tag-faces
   '(("p1" :foreground "#E16161")
     ("p2" :foreground "#E59B5D")
     ("p3" :foreground "#FFFBB8")
     ("p4" :foreground "#5099DA"))))
#+end_src

** Org Roam
(I've deactivated org-roam currently. It was working fine though..)

Org roam and dailies directory and capture templates for daily note. Capture templates for both org and markdown files in Org Roam Md-roam see > [[https://github.com/nobiot/md-roam][Md-roam by nobiot]]
[[https://github.com/org-roam/org-roam]]
#+begin_src emacs-lisp
;; Org-roam
;;(after! org
;;(setq org-roam-directory "~/Dropbox/vault/")
;;(setq org-roam-file-extensions '("org" "md")) ; enable Org-roam for a markdown extension
;;(setq org-roam-completion-everywhere t)
;;(setq org-roam-database-autosync-mode t)?? TODO Research this line before activating
;;(setq org-roam-capture-templates ; theres something wrong with either this or the capture template below causing an error
;;   '(("o" "Node.org" plain
;;      "%?"
;;      :if-new (file+head "${slug}.org" "
;;#+TITLE: ${TITLE}\n#+ID: %<%Y-%m-%d-%H%M>\n#+FILETAGS: \n#+LAST_MOD:\n"))))
;;(setq org-roam-dailies-capture-templates
;;    '(("d" "Daily Note" entry "* %<%I:%M %p>: %?"
;;       :if-new (file+head "%<%Y-%m-%d>.org" "#+TITLE: %<%Y-%m-%d>\n#+ID: %<%Y-%m-%d-%H%M>\n#+FILETAGS: :fleeting:dailynote:\n#+LAST_MOD:\n---\n* %<%Y-%m-%d>\n"))))
;;
;;(setq org-roam-dailies-directory "~/Dropbox/vault/journal/"))
;;
#+end_src

* Beacon/Focus
** Beacon
Flashy cursor on window switch.

#+begin_src emacs-lisp
;; Beacon global minor mode
(use-package! beacon) ;; Beacon
(after! beacon (beacon-mode 1))
;;
#+end_src

** Focus
Greys out out of focus text in writing mode.

#+begin_src emacs-lisp
;; Focus ;; TODO Test I don't know if this should be here without any settings..
(use-package! focus)
;;
#+end_src

* Browser
Load links in Qutebrowser by default.

 #+begin_src emacs-lisp
;; Set browser
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "qutebrowser")
;;(setq browse-url-browser-function 'eww-browse-url)
 #+end_src

* Keybinds
** Regularly used files/keybinds
The zz/function is stolen from [[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][zzamboni.org]] "Note that this requires lexical binding to be enabled (see top of page) so that the lambda creates a closure, otherwise the keybindings don’t work."

#+begin_src emacs-lisp
;; Keyboard shortcuts for regularly used files
(defun zz/add-file-keybinding (key file &optional desc)
  (let ((key key)
        (file file)
        (desc desc))
    (map! :desc (or desc file)
          key
          (lambda () (interactive) (find-file file)))))
(zz/add-file-keybinding "C-c t" "~/Dropbox/org/todo.org" "todo.org")
(zz/add-file-keybinding "C-c e" "~/Dropbox/org/events.org" "events.org")
(zz/add-file-keybinding "C-c g" "~/Dropbox/org/goals.org" "goals.org")
(zz/add-file-keybinding "C-c r" "~/Dropbox/org/reading.org" "reading.org")
;; (zz/add-file-keybinding "C-c j" "~/Dropbox/vault/0-Fleeting-Notes/log.md" "log.md")
;; (zz/add-file-keybinding "C-c q" "~/Dropbox/vault/QuickNote.md" "QuickNote.md")
(zz/add-file-keybinding "C-c x" "~/Dropbox/org/socials.org" "socials.org")
;;
(global-set-key (kbd "C-c w") 'count-words)
(global-set-key (kbd "C-c n") 'denote)
;; (global-set-key (kbd "C-c j") 'org-journal-open-current-journal-file)
(global-set-key (kbd "<f12>") 'writeroom-mode)
(global-set-key (kbd "<f11>") 'focus-mode)
(define-key global-map "\C-ca" 'org-agenda)
(global-set-key (kbd "C-c b") 'elfeed-show-visit-gui)
(define-key global-map (kbd "C-c l") #'elfeed)
(define-key global-map (kbd "C-c c") #'org-capture)
(define-key global-map (kbd "C-c f") #'flyspell-mode)
(define-key global-map (kbd "C-c m") #'notmuch-search)
(define-key global-map (kbd "C-c i") #'now)
;; avy search char in the open windows is kinda like qutebrowsers follow mode
(setq avy-all-windows t)
(map! :leader
      :prefix "j"
      :desc "avy-goto-char-timer" "j" #'avy-goto-char-timer)
#+end_src

** Make new buffers org/md easier
Make a new org and md buffer easier. Stolen from and thanks to [[https://tecosaur.github.io/emacs-config/config.html#pdf][tecosaur.github.io]]

#+begin_src emacs-lisp
(evil-define-command +evil-buffer-org-new (count file)
  "Creates a new ORG buffer replacing the current window, optionally
   editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)
        (setq-local doom-real-buffer-p t)))))
(map! :leader
      (:prefix "n"
       :desc "New empty Org buffer" "O" #'+evil-buffer-org-new))
;;
;; Make a new md buffer easy
(evil-define-command +evil-buffer-md-new (count file)
  "Creates a new markdown buffer replacing the current window, optionally
   editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new md*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (markdown-mode)
        (setq-local doom-real-buffer-p t)))))
;;
(map! :leader
      (:prefix "n"
       :desc "New empty md buffer" "M" #'+evil-buffer-md-new))
;;
#+end_src

** Leader Keybinds
Take me to your leader. Convienient keybinds I use a lot.

#+begin_src emacs-lisp
;(map! :leader
;      (:prefix "n"
;               :desc "Go to today's Daily Note" "d" #'org-roam-dailies-goto-today))
;;
;(map! :leader
;      (:prefix "n"
;               :desc "Go to yesterday's Daily Note" "D" #'org-roam-dailies-goto-yesterday))
;;
;; Remap space, space to switch to buffer instead of local files
(map! :leader
      :desc "Switch to buffer"
      "SPC" 'switch-to-buffer)
;;
;; Easier key for terminal popup
(map! :leader
      :desc "Vterm toggle"
      "v" '+vterm/toggle)
;; Easier key for terminal full window
(map! :leader
      :desc "Vterm here"
      "V" '+vterm/here)
;; Writeroom increase text width
(map! :leader
      :desc "Writeroom increase width"
      "=" 'writeroom-increase-width)
;; Writeroom decrease text width
(map! :leader
      :desc "Writeroom increase width"
      "-" 'writeroom-decrease-width)
;; Consult find file
(map! :leader
      :desc "consult-find file"
      "/" 'consult-find)
;; Writeroom mde
(map! :leader
      :desc "writeroom-mode"
      "z" 'writeroom-mode)
;; Writeroom mde
(map! :leader
      :desc "rgrep"
      "r" 'rgrep)
;; Dired alternaive
(map! :leader
      :desc "Dired"
      "d" 'dired)
;; Quick org-tags-sparse-tags
(map! :leader
      (:prefix ("o" . "org-tags-sparse-tree")
                :desc "org-tags-sparse-tree" "s" #'org-tags-sparse-tree))
;; Comment lines
(map! :leader
      :desc "Comment or uncomment lines" "#" #'comment-line)
;; Evil write all buffers
(map! :leader
      (:prefix ("w" . "Write all buffers")
               :desc "Write all buffers" "a" 'evil-write-all))
#+end_src

* Dired
** Dired Keybinds
#+begin_src emacs-lisp
(after! dired
(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "U") 'dired-unmark-all-marks
  (kbd "y") 'dired-do-copy
  (kbd "c") 'dired-create-empty-file
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "C") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "n") 'evil-search-next
  (kbd "N") 'evil-search-previous
  (kbd "q") 'kill-this-buffer
  ))
#+end_src

** Simple Dired
I don't always need to see all the info columns. So have this here for convienience. On Mobile I prefer the minimal look a bit like Ranger. I have 'all the icons' package working here too for folder/filetype icons in the GUI.

#+begin_src emacs-lisp
;(defun my-dired-mode-setup ()
;  "to be run as hook for `dired-mode'."
;  (dired-hide-details-mode 1))
;(add-hook 'dired-mode-hook 'my-dired-mode-setup)
#+end_src

* Elfeed
Elfeed settings

#+begin_src emacs-lisp
(require 'elfeed-org)
(after! elfeed
(elfeed-org)
(setq elfeed-search-filter "@1-day-ago +unread"
      elfeed-search-title-min-width 80
      elfeed-show-entry-switch #'pop-to-buffer
      shr-max-image-proportion 0.6)
(add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
(add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)
 (defadvice! +rss-elfeed-wrap-h-nicer ()
    "Enhances an elfeed entry's readability by wrapping it to a width of
`fill-column' and centering it with `visual-fill-column-mode'."
    :override #'+rss-elfeed-wrap-h
    (setq-local truncate-lines nil
                shr-width 120
        ;        visual-fill-column-center-text t
                default-text-properties '(line-height 1.1))
    (let ((inhibit-read-only t)
          (inhibit-modification-hooks t))
 ;     (visual-fill-column-mode)
      (set-buffer-modified-p nil)))     )
;; browse article in gui browser instead of eww
(defun elfeed-show-visit-gui ()
  "Wrapper for elfeed-show-visit to use gui browser instead of eww"
  (interactive)
  (let ((browse-url-generic-program "xdg-open"))
    (elfeed-show-visit t)))
;; Note: The customize interface is also supported.
(setq rmh-elfeed-org-files (list "~/Dropbox/org/elfeed.org"))
(add-hook! 'elfeed-search-mode-hook #'elfeed-update)
(after! elfeed-search
  (set-evil-initial-state! 'elfeed-search-mode 'normal))
(after! elfeed-show-mode
  (set-evil-initial-state! 'elfeed-show-mode   'normal))
;;
(after! evil-snipe
  (push 'elfeed-show-mode   evil-snipe-disabled-modes)
  (push 'elfeed-search-mode evil-snipe-disabled-modes))
;;
;; Tecosaur keybinds modified
(map! :map elfeed-search-mode-map
      :after elfeed-search
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :n "c" #'+rss/quit
      :n "e" #'elfeed-update
      :n "z" #'elfeed-search-untag-all-unread
      :n "u" #'elfeed-search-tag-all-unread
      :n "s" #'elfeed-search-live-filter
      :n "x" #'elfeed-search-show-entry
      :n "p" #'elfeed-show-pdf
      :n "+" #'elfeed-search-tag-all
      :n "-" #'elfeed-search-untag-all
      :n "S" #'elfeed-search-set-filter
      :n "b" #'elfeed-search-browse-url
      :n "y" #'elfeed-search-yank)
(map! :map elfeed-show-mode-map
      :after elfeed-show
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :nm "c" #'+rss/delete-pane
      :nm "o" #'ace-link-elfeed
      :nm "RET" #'org-ref-elfeed-add
      :nm "n" #'elfeed-show-next
      :nm "N" #'elfeed-show-prev
      :nm "p" #'elfeed-show-pdf
      :nm "+" #'elfeed-show-tag
      :nm "-" #'elfeed-show-untag
      :nm "s" #'elfeed-show-new-live-search
      :nm "y" #'elfeed-show-yank)
;;
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
#+end_src

* Projectile
Directories that show as projects in projectile. I don't really like this feature. A bit annoying to get trapped in things Emacs thinks are projects..

 #+begin_src emacs-lisp
;(setq projectile-project-search-path '("~/dotfiles/" "~/Dropbox/vault" "~/Dropbox/roam/" "~/sba/"))
(setq projectile-project-search-path '("/tmp/noproject"))
 #+end_src

* Snippet Functions
Some useful snippet functions, I also use yasnippet for this but I like it to be here too..

** Markdown front matter
#+begin_src emacs-lisp
(defun my-md-front-matter ()
 (interactive)
 (insert "ID: %<%Y%m%d%H%M>\n")
 )
#+end_src

** Org front matter
#+begin_src emacs-lisp
(defun my-org-front-matter ()
 (interactive)
 (insert "#+TITLE:\n#+ID: \n#+FILETAGS: \n#+OPTIONS: num:nil toc:nil author:nil\n#+STARTUP: showall")
 )
#+end_src

** Blog front matter
#+begin_src emacs-lisp
(defun my-website-front-matter ()
 (interactive)
 (insert "---
layout: post
title: ""
date: 2023-00-00 00:00:00
categories:
---")
 )
;;
#+end_src

** Timestamp
Press this all the time for journal entries. Convienient keybind is above. (C-c i)

#+begin_src emacs-lisp
;; Timestamp
(defun now ()
 (interactive)
 (insert (format-time-string "**** %H:%M" )
 ))
;;
#+end_src

** Quick todo
A quick way to get a todo into my daily log with appropriate level heading. I use M-x to call it.
#+begin_src emacs-lisp
(defun td ()
  (interactive)
  (insert "** TODO "
  ))
#+end_src

* Md-roam
Makes roam's features also consider Markdown files as part of the database. (Disabled currently)
[[https://github.com/nobiot/md-roam]]
#+begin_src emacs-lisp
;       (use-package! md-roam
;  :after org-roam
;  :config
;  (set-company-backend! 'markdown-mode 'company-capf)
;  (setq org-roam-file-extensions '("org" "md"))
;  (md-roam-mode 1)
;  (org-roam-db-autosync-mode 1)
;  (add-to-list 'org-roam-capture-templates
;               '("m" "Node.md" plain "" :target
;                 (file+head "${slug}.md"
;                            "---\ntitle: ${title}\nid: %<%Y-%m-%d-%H%M>\ntags: \n---\n")
;                 :unnarrowed t))
;  )
#+end_src

* Denote
I'm still only scratching the surface of this package really. I primarily just use it for generating quick fleeting notes to a chosen directory right now.
#+begin_src emacs-lisp
;; Make Elisp files in that directory available to the user.
(add-to-list 'load-path "~/.emacs.d/manual-packages/denote")

;; Configuration
(require 'denote)

;; Remember to check the doc strings of those variables.
(setq denote-directory (expand-file-name "~/Dropbox/vault/"))
(setq denote-known-keywords '(""))
(setq denote-infer-keywords nil)
(setq denote-sort-keywords t)
(setq denote-file-type "markdown-yaml") ; Org is the default, set others here
(setq denote-prompts '(nil))
(setq denote-excluded-directories-regexp nil)
(setq denote-excluded-keywords-regexp nil)

;; Pick dates, where relevant, with Org's advanced interface:
(setq denote-date-prompt-use-org-read-date t)


;; Read this manual for how to specify `denote-templates'.  We do not
;; include an example here to avoid potential confusion.
(setq denote-id-format "%Y%m%d%H%M")
(setq denote-date-format "%Y%m%d%H%M") ; read doc string
;test
(setq denote-yaml-front-matter
  "ID: %2$s
#Fleeting\n")
;
(setq denote-org-front-matter
"#+TITLE: %s
#+ID: %s
#+FILETAGS: %s
\n")
;; If you use Markdown or plain text files (Org renders links as buttons
;; right away)
(add-hook 'find-file-hook #'denote-link-buttonize-buffer)

;; We use different ways to specify a path for demo purposes.
(setq denote-dired-directories
      (list denote-directory
            (thread-last denote-directory (expand-file-name "attachments"))
            (expand-file-name "~/Documents/books")))

;; Generic (great if you rename files Denote-style in lots of places):
;; (add-hook 'dired-mode-hook #'denote-dired-mode)
;;
;; OR if only want it in `denote-dired-directories':
(add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
#+end_src
* Rainbow mode
Show me colour hex codes everywhere please..
#+begin_src emacs-lisp
(add-hook! org-mode 'rainbow-mode)
(add-hook! prog-mode 'rainbow-mode)
#+end_src

* Org clock sfx
Sound effect on completion of a timed session.
#+begin_src emacs-lisp
(setq org-clock-sound "~/sfx/advance_ding.wav")
(add-hook 'org-timer-done-hook 'org-clock-out)
;
#+end_src

* Org-msg
By default the accent colour for headers etc. in org-msg emails are red. This changes that to a green.
#+begin_src emacs-lisp
(setq +org-msg-accent-color "#80C2A2")
#+end_src

* Org-roam UI
Very pretty way to view your roam database. Useful for interlinking notes and ideas. (Disabled for now - not using org-roam currently)
[[https://github.com/org-roam/org-roam-ui]]
#+begin_src emacs-lisp
;(use-package! websocket
;    :after org-roam)
;
;(use-package! org-roam-ui
;    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
;    :config
;    (setq org-roam-ui-sync-theme t
;          org-roam-ui-follow t
;          org-roam-ui-update-on-save t
;          org-roam-ui-open-on-start nil))
#+end_src

* nov.el
For reading epubs
#+begin_src emacs-lisp
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (map! :map nov-mode-map
        :n "RET" #'nov-scroll-up)

  (defun doom-modeline-segment--nov-info ()
    (concat
     " "
     (propertize
      (cdr (assoc 'creator nov-metadata))
      'face 'doom-modeline-project-parent-dir)
     " "
     (cdr (assoc 'title nov-metadata))
     " "
     (propertize
      (format "%d/%d"
              (1+ nov-documents-index)
              (length nov-documents))
      'face 'doom-modeline-info)))

  (advice-add 'nov-render-title :override #'ignore)

  (defun +nov-mode-setup ()
    "Tweak nov-mode to our liking."
    (face-remap-add-relative 'variable-pitch
                             :family "JetBrains Mono"
                             :height 1.1
                             :width 'semi-expanded)
    (face-remap-add-relative 'default :height 1.1)
    (setq-local line-spacing 0.2
                next-screen-context-lines 4
                shr-use-colors nil)
     (require 'visual-fill-column nil t)
     (setq-local visual-fill-column-center-text t)
    ;;             visual-fill-column-width 120
    ;;             nov-text-width 120)
    ;; (visual-fill-column-mode 1)
    ;; Re-render with new display settings
    (nov-render-document)
    ;; Look up words with the dictionary.
    (add-to-list '+lookup-definition-functions #'+lookup/dictionary-definition)
    ;; Customise the mode-line to make it more minimal and relevant.
    (setq-local
     mode-line-format
     `((:eval
        (doom-modeline-segment--workspace-name))
       (:eval
        (doom-modeline-segment--window-number))
       (:eval
        (doom-modeline-segment--nov-info))
       ,(propertize
         " %P "
         'face 'doom-modeline-buffer-minor-mode)
       ,(propertize
         " "
         'face (if (doom-modeline--active) 'mode-line 'mode-line-inactive)
         'display `((space
                     :align-to
                     (- (+ right right-fringe right-margin)
                        ,(* (let ((width (doom-modeline--font-width)))
                              (or (and (= width 1) 1)
                                  (/ width (frame-char-width) 1.0)))
                            (string-width
                             (format-mode-line (cons "" '(:eval (doom-modeline-segment--major-mode))))))))))
       (:eval (doom-modeline-segment--major-mode)))))

  (add-hook 'nov-mode-hook #'+nov-mode-setup))
#+end_src
* Timestamp (Last modified)
I have this availible as an option but don't find it as useful as I thought I would..
#+begin_src emacs-lisp
(after! org
  (setq time-stamp-active t
    time-stamp-start "#\\+LAST_MOD:[ \t]*"
    time-stamp-end "$"
    time-stamp-format "\[%Y-%m-%d %02H:%02M\]")
(add-hook 'before-save-hook 'time-stamp))
#+end_src
* EMMS
For playing music or video files with mpv.
#+BEGIN_SRC emacs-lisp
(emms-all)
(emms-default-players)
(emms-playing-time-mode 1)
(setq emms-source-file-default-directory "~/Music/"
      emms-playlist-buffer-name "*Music*"
      emms-info-asynchronously t
      emms-mode-line-icon-color "grey"
      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
(map! :leader
      (:prefix ("e" . "EMMS audio player")
       :desc "Go to Emms playlist"      "l" #'emms-playlist-mode-go
       :desc "Add to playlist (Dired)"  "a" #'emms-add-dired
       :desc "Emms modeline toggle"     "t" #'emms-mode-line-toggle
       :desc "Emms pause track"         "x" #'emms-pause
       :desc "Emms stop track"          "s" #'emms-stop
       :desc "Emms play previous track" "p" #'emms-previous
       :desc "Emms play next track"     "n" #'emms-next))
#+END_SRC
* Markdown/Writeroom hook
When a markdown file is opened it automatically centres with writeroom mode.
#+begin_src emacs-lisp
(add-hook 'markdown-mode-hook 'writeroom-mode)
;; (add-hook 'markdown-mode-hook (lambda ()
;;                             (setq buffer-face-mode-face '(:family "Alegreya :size 18"))
;;                             (buffer-face-mode)))
#+end_src
* Smart Parens
Disable automatically closing open parenthesis, brackets, markup etc.
#+begin_src emacs-lisp
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+end_src
* Load other config files
Private email setup etc.
#+begin_src emacs-lisp
;; Load other config files
(load! "+private")
#+end_src
